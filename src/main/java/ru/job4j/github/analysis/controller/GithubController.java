package ru.job4j.github.analysis.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ru.job4j.github.analysis.model.Commit;
import ru.job4j.github.analysis.model.GitHubRepository;
import ru.job4j.github.analysis.service.commit.CommitService;
import ru.job4j.github.analysis.service.repository.RepositoryService;


import java.util.List;

@Tag(name = "GithubController", description = "GithubController management APIs")
@RestController
@RequestMapping("/api")
public class GithubController {
    @Autowired
    private RepositoryService repositoryService;
    @Autowired
    private CommitService commitService;

    @Operation(
            summary = "Get all GitHubRepositories",
            description = "Get all tracked githubrepositories.",
            tags = { "GitHubRepository", "get" })
    @ApiResponses({
            @ApiResponse(responseCode = "201", content = { @Content(schema = @Schema(implementation = GitHubRepository.class), mediaType = "application/json") }),
            @ApiResponse(responseCode = "400", content = { @Content(schema = @Schema()) }) })
    @ResponseStatus(value = HttpStatus.OK)
    @GetMapping("/repositories")
    public List<GitHubRepository> getAllRepositories() {
        return repositoryService.getAll();
    }

    @Operation(
            summary = "Get all commits by github repository full name",
            description = "Get all commits by repository full name",
            tags = { "Commit", "get" })
    @ApiResponses({
            @ApiResponse(responseCode = "200", content = { @Content(schema = @Schema(implementation = Commit.class), mediaType = "application/json") }),
            @ApiResponse(responseCode = "400", content = { @Content(schema = @Schema()) }) })
    @ResponseStatus(value = HttpStatus.OK)
    @GetMapping("/commits")
    public List<Commit> getCommits(@RequestParam String repoName) {
        return commitService.getCommitsByRepository(repoName);
    }

    @Operation(
            summary = "Add github repositories by userName",
            description = "Save all github repositories into the db of a particuler user so that the commits could be tracked. The ids are autogenerated by the db. The response is void",
            tags = { "GitHubRepository", "post" })
    @ApiResponses({
            @ApiResponse(responseCode = "204", description = "No content"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = { @Content(schema = @Schema()) }) })
    @PostMapping("/repository")
    public ResponseEntity<Void> create(@RequestParam String userName) {
        repositoryService.create(userName);
        return ResponseEntity.noContent().build();
    }
}
